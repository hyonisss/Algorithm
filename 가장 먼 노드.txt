
---
title: 프로그래머스-그래프(1)(Java)
date: 2020-04-02 16:45:28
tags: ["java", "programmers"]
---


## 프로그래머스 그래프(1)

#### 가장 먼 노드

* * *   
   

> 문제
n개의 노드가 있는 그래프가 있습니다. 각 노드는 1부터 n까지 번호가 적혀있습니다. 1번 노드에서 가장 멀리 떨어진 노드의 갯수를 구하려고 합니다. 가장 멀리 떨어진 노드란 최단경로로 이동했을 때 간선의 개수가 가장 많은 노드들을 의미합니다.

노드의 개수 n, 간선에 대한 정보가 담긴 2차원 배열 vertex가 매개변수로 주어질 때, 1번 노드로부터 가장 멀리 떨어진 노드가 몇 개인지를 return 하도록 solution 함수를 작성해주세요.


> 제한사항   
   

노드의 개수 n은 2 이상 20,000 이하입니다.

간선은 양방향이며 총 1개 이상 50,000개 이하의 간선이 있습니다.

vertex 배열 각 행 [a, b]는 a번 노드와 b번 노드 사이에 간선이 있다는 의미입니다.



> 입출력 예

n	vertex	                                             return

6	[[3, 6], [4, 3], [3, 2], [1, 3], [1, 2], [2, 4], [5, 2]]	3

 > 문제 풀이

BFS를 활용하여 문제를 풀었다.

문제는 1이라는 노드에서 시작해서 가장 먼 노드들의 갯수를 return 하면 된다. 이때 가장 먼 노드란 최단 경로를 기준으로 한다. 따라서 BFS를 통해서 각 노드에 접근하면서 최단 거리를 min_dis 벡터에 저장한다. 이후 min_dis를 역순으로 정렬한 뒤, 가장 앞에 있는 값이 가장 먼 노드가 되며 앞에서 부터 max값과 다른 값이 나올때까지 세면 가장 먼 노드들의 갯수를 구할 수 있다.

* * * 

> 나의 코드
#include <vector>
#include<queue>
using namespace std; //c


int solution(int n, vector<vector<int>> edge) {
	int answer = 0, Max = 0;
	queue<int> q;
	vector<int> visit(n + 1, 0);
	vector<vector<int>> g(n + 1, vector<int>());
	for (int i = 0; i < edge.size(); i++) { //search

		int u = edge[i][0], v = edge[i][1];
		g[u].push_back(v); //다시 넣기
		g[v].push_back(u); //다시 
	}
	visit[1] = 1;
	q.push(1);
	while (!q.empty()) {
		int cur = q.front();
		q.pop();
		for (int i = 0; i < g[cur].size(); i++) {
			int next = r][i];
			if (!visit[next] && next != 0) {
				visit[next] = visit[cur] + 1;
				q.push(next);
				if (visit[next] > Max)Max = visit[next];
			}
		}
	}
	for (int i = 1; i <= n; i++)
		if (Max == visit[i])answer++;
	return answer;
}

