---
title: 프로그래머스-스택/큐1
subtitle: 탑
date: 2020-02-29 15:14:30
tags: ["algorithm", "programmers", "java"]
---
  
## 프로그래머스 스택/큐(1)

#### 탑

* * *   
   
> 나의 풀이 (LinkedList 사용)   
   
   
<pre>
<code>
import java.util.*;
class Solution {
    public int[] solution(int[] heights) {
        int[] answer = new int[heights.length]; //heights 배열 길이만큼 answer 배열 초기화
        LinkedList<Integer> stack = new LinkedList<Integer> (); //스택 선언
        for(int k : heights) stack.addLast(k);   // heights 배열을 스택에 넣어줌
        for(int j = heights.length; j >=1 ;j--) {          
            int last = stack.removeLast();        
            for(int i = 1; i<=stack.size(); i++) {             
                if(last < heights[j-i-1]) {             // 현재의 last(마지막 등대의 높이)값 보다 높은 등대가 있으면 
                   answer[j-1] = j-i;                   // 배열에 몇 번째 등대인지 저장하고 안에 for문을 빠져나감 
                   break;
               }
               else if(i==stack.size())       // 다 비교해봤는데 현재의 last 보다 큰 등대가 없다를 판별해주는 조건문
                   answer[j-1] = 0;            // 그럼 0을 저장
            }
        }
        return answer;
    }
}
</code>
</pre>

* * *
   
* 스택 사용   

왼쪽으로 등을 쏜다는 문제에서 LIFO 를 사용하기 위해 스택을 사용하였음   
제일 밖에 있는 for문의 j는 answer 배열의 index값을 계산하기 위한 것.


**반복문 빠져나오기**

    break;
       

* * * 
   
> 다른 사람 풀이 (Stack 사용)   
   
    
스택을 사용하니 풀이가 더 깔끔하다.
    
    
    import java.util.Stack;
    class Solution {
        public int[] solution(int[] heights) {
            Stack<Integer>stk=new Stack<>();
            int[] answer = new int[heights.length];
            for(int i=0;i<heights.length;i++) {             // 스택에 배열 데이터 저장
                stk.push(heights[i]);
                
            }
            while(!stk.isEmpty()) {                        // 첫번째 탑까지 다 비교
                int tmp=stk.pop();                         // 바로 왼쪽에 있는 탑부터 비교
                       
                for(int i=stk.size();i>=0;i--) {           
                    if(tmp<heights[i]) {                   // 더 큰 탑이 있다면
                        answer[stk.size()]=i+1;            // 몇번째 탑(i+1)인지 저장
                        break;
                    }
                }
                
                
            }
            
            

