
---
title: 프로그래머스-깊이너비우선탐색(3)(Java)
date: 2020-04-02 16:45:28
tags: ["java", "programmers"]
---


## 프로그래머스 깊이/너비 우선탐색(3)

#### 단어변환

* * *   
   
> 나의 처음 실패한 풀이 (dfx 사용)   
   
  import java.util.*;
class Solution {
    int num = 0;
    public int dfs(String begin, String target, String[] words,int k) {
        int cnt = 0; // 글자 다른거 개수 세는 변수
         for(int i =0 ; i< begin.length() ; i++) {
            if(begin.charAt(i)!= target.charAt(i)) {
                cnt++;
            }
        }
        if(k==words.length-1) {
            if(cnt == 1) num++;
            else num = 0;
        }
        else if(cnt==1) {
                num++;
                dfs(target, words[k+1], words, k+1);
                
            }
        else {
            dfs(begin, words[k+1], words, k+1);
            }    
            return num;
    
    }

    public int solution(String begin, String target, String[] words) {
        int answer = 0;
        answer = dfs(begin, words[num], words, num);
        
        return answer;
    }
}
   
> 12시간 고민 끝에 완성한 정답 풀이

import java.util.*;
class Solution {
    static int minConversion = 0; //최소 방문 횟수
    boolean diffOneChar(String str1, String str2) {
        int cnt = 0; // 글자 다른거 개수 세는 변수
        for(int i =0 ; i< str1.length() ; i++) {
            if(str1.charAt(i)!= str2.charAt(i)) {
                cnt++; 
                if(cnt>1) break;
            }
        }
        if(cnt == 1) return true;
        else return false;
    }
    void dfs(String begin, String target, String[] words,int conversion, boolean[] visited) {
        if(begin.equals(target)) minConversion = (minConversion == 0) ? conversion : Math.min(minConversion, conversion);
        for(int i = 0; i<words.length; i++) {
            
            if(!visited[i] && diffOneChar(begin, words[i])) {
                visited[i] = true;
                dfs(words[i], target, words, conversion+1, visited);
                visited[i] = false;
            }                             
        }
        
    }


    public int solution(String begin, String target, String[] words) {
        boolean visited[] = new boolean[words.length]; //중복 방문 예방
        dfs(begin, target, words, 0, visited);        
        return minConversion;
    }
}