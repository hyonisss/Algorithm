
#define BACK_COLOR 	WHITE
#define WIDTH 		320
#define HEIGHT 		240
struct Basket
{
	int timer;
	int move_flag;
	int pos[2];
	int pos_init[2];
	int pos_back[2];
	int size[2];
	unsigned short color;
	int speed_step;
	int move_step;
};
struct Food
{
	int timer;
	int move_flag;
	int flag;
	int flag_new;
	int pos[2];
	int pos_back[2];
	int size[2];
	int image;
	int speed_step;
	int move_step;
}Ffood[2];
//unsigned int COLOR[] = {BLACK, GREEN, RED, YELLOW, WHITE};
struct Basket Bas = {0,1,{0,190},{0,190},{0,190}, {80, 30},BLACK, 4, 80};
int score = 3;
int level2=0;
int check[10] = {0};
void Move_Food(int time) {
	srand(RTC_Get_Time());
	int i;
	if(time==5) {
		Ffood[0].flag = 1;
	}
	else if(time%5 == 0) {
		Uart_Printf("%d", time);
		for(i=0; i<2; i++) {
			if(Ffood[i].flag == 0) {
				Ffood[i].timer = 0;
				Ffood[i].move_flag = 1;
				Ffood[i].flag_new = 1; //새로 생성된 food 구분하기
				Ffood[i].flag = 1;
				Ffood[i].pos[0] = Ffood[i].pos_back[0] = rand() % 8 * 40 ;
				Ffood[i].pos[1] = 0;
				Ffood[i].image = rand() % 4;

				break;
			}
		}
	}
	for(i=0;i<2;i++) {
		if(Ffood[i].flag == 1) {
			Ffood[i].timer = time;
			if(Ffood[i].timer >= Ffood[i].speed_step) {
				Ffood[i].pos_back[0] = Ffood[i].pos[0] ;
				Ffood[i].pos_back[1] = Ffood[i].pos[1] ;
				if(Ffood[i].flag_new) {
					Ffood[i].flag_new = 0;
				}
				else Ffood[i].pos[1] = Ffood[i].pos[1] + Ffood[i].move_step;
				Ffood[i].move_flag = 1;
			}
		}
	}
}
void Level2(void) {
	do{
		Lcd_Clr_Screen(BLUE);
		}while(!Key_Get_Pressed());

}
void Draw_Food(void) {
	int i;
	for(i=0; i<2; i++) {
		if(Ffood[i].pos[1] >= 180) {
			Check(i);
			Ffood[i].pos[1] = 0;
			Lcd_Printf(70,225, YELLOW,BLACK, 1,1,"%d", score);
			if(score==10 || score<=0) {level2=1; return;}
			Ffood[i].flag=0;
			Lcd_Draw_Bar(Ffood[i].pos_back[0], Ffood[i].pos_back[1], Ffood[i].pos_back[0] + Ffood[i].size[0], Ffood[i].pos_back[1] + Ffood[i].size[1], WHITE);
		}
		if(Ffood[i].move_flag != 0 && Ffood[i].flag != 0) {
			Lcd_Draw_Bar(Ffood[i].pos_back[0], Ffood[i].pos_back[1], Ffood[i].pos_back[0] + Ffood[i].size[0], Ffood[i].pos_back[1] + Ffood[i].size[1], WHITE);
			Lcd_Draw_BMP(Ffood[i].pos[0],Ffood[i].pos[1],Disp[Ffood[i].image]);
				Ffood[i].move_flag = 0;
		}
	}
}

void Check(int num) {
	int idx = Ffood[num].pos[0] / 40;
	int idx_fd = Ffood[num].image % 2;
	if(idx ==0 || idx==1) {
		if(Bas.pos[0]>=0 && Bas.pos[0] <80) {
			if(!idx_fd) {score++; return;}
			else {score--; return;}
		}
		else return;
	}
	else if(idx == 2 || idx ==3) {
		if(Bas.pos[0]>=80 && Bas.pos[0] <160) {
			if(!idx_fd) {score++; return;}
			else {score--; return;}
				}
		else return;
	}
	else if(idx ==4 || idx == 5) {
		if(Bas.pos[0]>=160 && Bas.pos[0] <240) {
			if(!idx_fd) {score++; return;}
			else {score--; return;}
				}
		else return;
	}
	else {
		if(Bas.pos[0]>=240) {
			if(!idx_fd) {score++; return;}
			else {score--; return;}
				}
		else return;
	}

}

void Move_Basket(int key) {

	if(key == 2) {
		if(Bas.pos[0] <= 0) {
			return;
		}
		else {
			Bas.pos_back[0] = Bas.pos[0];
			Bas.pos[0] = Bas.pos[0] - Bas.move_step;
		}
	}
	else if(key == 4) {
		if(Bas.pos[0] >= 240) {
			return;
		}
		else {
			Bas.pos_back[0] = Bas.pos[0];
			Bas.pos[0] = Bas.pos[0] + Bas.move_step;
		}
	}
}

void Draw_Basket(void) {

	Lcd_Draw_Bar(Bas.pos_back[0], Bas.pos_back[1], Bas.pos_back[0] + Bas.size[0], Bas.pos_back[1] + Bas.size[1], BACK_COLOR);

	if(Bas.pos[0] + Bas.size[0] >= 319) {
		Lcd_Draw_BMP(Bas.pos[0],Bas.pos[1],basket);


	}
	else {
		Lcd_Draw_BMP(Bas.pos[0],Bas.pos[1],basket);
	}

}

void Level1(void) {
		srand(RTC_Get_Time());
		struct Food init = {0,1,0,0,{0,0},{0,0},{40,30}, 0, 5, 30}; // timer, move_flag, flag
		int key;
		int i, tmp;
		volatile int time = 0;
		do{
		Lcd_Draw_BMP(0,0,level1);
		}while(!Key_Get_Pressed());

		for(i=0; i<2;i++) {
			Ffood[i] = init;
			while(1) {
				tmp = rand()%4;
				if(!check[tmp]) {
					check[tmp] = 1;
					Ffood[i].image = tmp;
					break;
				}
			}
			Ffood[i].pos[0] = rand() % 8 * 40 ;

		}
	//	Uart_Printf("%d %d\n", Ffood[0].pos[0], Ffood[1].pos[0]);
	//	Uart_Printf("%d %d", Ffood[0].image, Ffood[1].image);
		Game_Init();
		Draw_Basket(); // 처음 바구니 그리기
		for(;;) {
			if(Timer0_Check_Expired()) {
				time++;
				Move_Food(time);
				Draw_Food();
			}

				if(level2) break;
				key = Key_Get_Pressed();
				if(key) {
					Move_Basket(key);
					Draw_Basket();
					Key_Wait_Key_Released();
				}
			}
		Level2();
}
