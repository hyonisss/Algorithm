/***********************************************************/
다음은 사용자 함수를 호출하는 루틴임 지우지 말것!
/***********************************************************/

#include "device_driver.h"
#include "math.h"
#include "2440addr.h"
#include <stdlib.h>
#define printf 	Uart_Printf

void User_Main(void);
typedef struct
{
int day;
int year;
int mon;
int date;
int hour;
int min;
int sec;
}RTC_TIME;

int RTC_Get_Time(void)
{
RTC_TIME a;

a.hour = (int)rBCDHOUR;
a.min = (int)rBCDMIN;
a.sec = (int)rBCDSEC;
return ((a.hour >> 4) & 0xf) * 10 + (a.hour & 0xf) * 360 + \
((a.min >> 4) & 0xf) * 10 + (a.min & 0xf) * 60 + \
((a.sec >> 4) & 0xf) * 10 + (a.sec & 0xf);

}
void Main(void)
{
	MMU_Init();
	Led_Init();
	Key_Poll_Init();
	Uart_Init(115200);
	Timer0_Init();
	Timer3_Buzzer_Init();
	Timer4_Init();
	Lcd_Graphic_Init();
	Lcd_Clr_Screen(0xf800);

	Uart_Printf("Welcome GBOX World!\n");
	User_Main();
	Uart_Printf("Good Bye~\n");
}

/*===== << 여기부터 사용자 프로그램을 작성함 >> =====*/



#include "./Image/start.h"
#include "./Image/ins2.h"
#include "./Image/basket.h"
#include "./Image/basket2.h"
#include "./Image/vege.h"
#include "./Image/ins1.h"
#include "./Image/level1.h"
#include "./Image/nvege.h"
#include "./Image/bomb.h"
#include "./Image/back.h"
#include "./Image/exp1.h"
#include "./Image/black.h"
#include "./Image/lv1.h"
#include "./Image/lv2.h"
#include "./Image/lv3.h"
#include "./Image/lv4.h"

#define BLACK	0x0000
#define WHITE	0xfffe
#define BLUE	0x003e
#define GREEN	0x07c0
#define RED		0xf800
#define YELLOW	0xf7c0
#define PINK 	0xf8fe
#define BACK_COLOR 	WHITE
#define WIDTH 		320
#define HEIGHT 		240
void Draw_Basket1(void);
void Draw_Basket2(void);
void Move_Basket(int key);
void Move_Food(int time);
void Draw_Food(void);
void GameOver(void);
void Level(void);
void Game_Init(void);
void Exp_Game(void);
void Check1(int i);
void Check2(int i);


struct Basket
{
	int timer;
	int move_flag;
	int pos[2];
	int pos_init[2];
	int pos_back[2];
	int size[2];
	unsigned short color;
	int speed_step;
	int move_step;
};
struct Food
{
	int timer;
	int move_flag;
	int flag;
	int flag_new;
	int pos[2];
	int pos_back[2];
	int size[2];
	int image;
	int speed_step;
	int move_step;
}Ffood[4];
struct Basket Bas = {0,1,{0,190},{0,190},{0,190}, {80, 30},BLACK, 4, 80};
int score = 3;
int lv_flag = 0;
int lv_cnt = 0;
int check[10] = {0};
int food_var[4] = {4,6,8,8};
int bas_right[4] = {0,0,40,40};
int vege_cnt = 0;

enum key{C1, C1_, D1, D1_, E1, F1, F1_, G1, G1_, A1, A1_, B1, C2, C2_, D2, D2_, E2, F2, F2_, G2, G2_, A2, A2_, B2};
enum note{N16, N8, N4, N2, N1};
const int song[][2] = {{G1,N4},{F1,N8},{G1,N4},{E1,N2},{C1,N8},{D1,N8},{C2,N4},{B1,N8},{C2,N4},{G1,N4},{E1,N4},{F1,N4},{D1,N2},{0xff, 0xff}};
const int suc[][2] = {{G1,N16},{C1,N16},{D1,N4},{E1,N2},{C1,N8},{F1,N8},{E1,N2},{F1,N8},{G1,N16},{D1,N4},{0xff, 0xff}};
const int fail[][2] = {{B1,N4},{A1,N4},{B1,N4},{A1,N4},{B1,N4},{E1,N4},{G1,N4},{F1,N4},{D1,N4},{0xff, 0xff}};
const unsigned short * Disp[] = {vege, ins1, vege, nvege, vege, ins2, bomb, bomb};
const unsigned short * Disp2[] = {lv1, lv2, lv3, lv4};

void User_Main(void)
{
	int xtmp, ytmp;
	int u;
	for(;;)
	{
		int i = 0;
		Lcd_Control_Brightness(5);
		Lcd_Select_Buffer_Mode(LAYER_MODE);
	 	Lcd_Select_Draw_Frame_Buffer(0);
	 	Lcd_Select_Display_Frame_Buffer(0);
	 	Lcd_Clr_Screen(RED);
	    Lcd_Get_Info_BMP(&xtmp, &ytmp, start);

	    Lcd_Draw_BMP((160-(xtmp/2)), (120-(ytmp/2)), start);
		do{
		Lcd_Printf(80,80,YELLOW,RED,2,2,"VEGAN GAME");
		Timer4_Delay(300);
		Lcd_Printf(80,80,GREEN,RED,2,2,"VEGAN GAME");
		Lcd_Printf(80,150,WHITE,BLACK,1,1,"Game Start : Press 1");
		Lcd_Printf(75,170,WHITE,BLACK,1,1,"How to Play : Press 2");
		while(song[i][0] != 0xff)
			{
				Timer3_Buzzer_Beep(song[i][0], song[i][1]);
				i++;
			}
							Led_Display(0x5);
							Timer4_Delay(50);
							Led_Display(0x6);
							Timer4_Delay(50);
						}while(!Key_Get_Pressed());

				u = Key_Wait_Key_Pressed ();
				switch(u) {
				case 5: Level(); break;
				case 6: Exp_Game(); break;
				}
	}
}

void Level(void) {
		srand(RTC_Get_Time());
		struct Food init = {0,1,0,0,{0,0},{0,0},{40,30}, 0, 6 - lv_cnt, 30}; // timer, move_flag, flag
		int key;
		int i, tmp;
		lv_flag = 0;
		vege_cnt = 0;
		score=3;
		volatile int time = 0;
		Key_Wait_Key_Released();
		do{
					Lcd_Draw_BMP(0,0,Disp2[lv_cnt]);
			}while(!Key_Get_Pressed());


		for(i=0; i<10; i++) {
						check[i] = 0;
					}
		for(i=0; i<food_var[lv_cnt]/2;i++) {
			Ffood[i] = init;
			while(1) {
				tmp = rand()%food_var[lv_cnt];
				if(!check[tmp]) {
					check[tmp] = 1;
					Ffood[i].image = tmp;
					break;
				}
			}
			if(tmp >= 6) {
				Ffood[i].speed_step = 1;
			}

			Ffood[i].pos[0] = rand() % 8 * 40 ;

		}

		Game_Init();
		while(song[i][0] != 0xff)
					{
						Timer3_Buzzer_Beep(song[i][0], song[i][1]);
						i++;
					}
		if(lv_cnt<=1) {
			Draw_Basket1(); // 처음 바구니 그리기
					for(;;) {
						if(Timer0_Check_Expired()) {
							time++;
							Move_Food(time);
							Draw_Food();
						}

							if(lv_flag) break;
							key = Key_Get_Pressed();
							if(key) {
								Move_Basket(key);
								Draw_Basket1();
								Key_Wait_Key_Released();
							}
					}
		}
		else if(lv_cnt>=2) { // 레벨 3,4
				Draw_Basket2(); // 처음 바구니 그리기
								for(;;) {
									if(Timer0_Check_Expired()) {
										time++;
										Move_Food(time);
										Draw_Food();
									}

										if(lv_flag) break;
										key = Key_Get_Pressed();
										if(key) {
											Move_Basket(key);
											Draw_Basket2();
											Key_Wait_Key_Released();
										}
								}

		}
		Lcd_Draw_BMP(0,0,black);
		if(lv_cnt==4) {
			do {
									Lcd_Printf(100,30,YELLOW,BLACK,2,2,"SUCCESS");
									Lcd_Printf(100,140,BLUE,YELLOW,1,1," VEGE # : ");
									Lcd_Printf(175,140,PINK,YELLOW,1,1,"%d ", vege_cnt);
									Lcd_Printf(110,60,RED,BLACK,2,2,"LEVEL%D",lv_cnt);
									Lcd_Printf(70,190,WHITE,BLACK,1,1,"Congratulations!", lv_cnt+1);
									while(song[i][0] != 0xff)
												{
													Timer3_Buzzer_Beep(song[i][0], song[i][1]);
													i++;
												}
									Timer4_Delay(300);
									Lcd_Draw_Bar(100,190,300,210,BLACK);
									Lcd_Draw_Bar(100,30,300,60,BLACK);
									Lcd_Printf(100,30,GREEN,BLACK,2,2,"SUCCESS");
									Timer4_Delay(300);
									Led_Display(0x5);
									Timer4_Delay(200);
									Led_Display(0x6);
								}while(!Key_Get_Pressed());
									Lcd_Draw_BMP(0,0, start);
		}
		else if(lv_cnt<4) {
			do {
						Lcd_Printf(100,30,YELLOW,BLACK,2,2,"SUCCESS");
						Lcd_Printf(100,140,BLUE,YELLOW,1,1," VEGE # : ");
						Lcd_Printf(175,140,PINK,YELLOW,1,1,"%d ", vege_cnt);
						Lcd_Printf(50,190,WHITE,BLACK,1,1,"press any key to go", lv_cnt+1);
						Lcd_Printf(210,190,RED,BLACK,1,1,"Level %d", lv_cnt+1);
						Lcd_Printf(110,60,RED,BLACK,2,2,"LEVEL%D",lv_cnt);
						while(song[i][0] != 0xff)
									{
										Timer3_Buzzer_Beep(song[i][0], song[i][1]);
										i++;
									}
						Timer4_Delay(300);
						Lcd_Draw_Bar(100,30,300,60,BLACK);
						Lcd_Printf(100,30,GREEN,BLACK,2,2,"SUCCESS");
						Lcd_Draw_Bar(50,190,300,210,BLACK);
						Timer4_Delay(300);
						Led_Display(0x5);
						Led_Display(0x6);

					}while(!Key_Get_Pressed());
			Level();
		}
}

void Exp_Game(void) {
	Key_Wait_Key_Released();
	do{
		Lcd_Draw_BMP(0,0,exp1);
	}while(!Key_Get_Pressed());
	Key_Wait_Key_Released();
	Level();
}

void Move_Food(int time) {
	srand(RTC_Get_Time());
	int i, tmp;
	if(time==(5-lv_cnt)) {
		Ffood[0].flag = 1;
		Ffood[0].flag_new = 1;
	}
	else if(time%(5-lv_cnt) == 0) {
		Uart_Printf("%d", time);
		for(i=0; i<food_var[lv_cnt]/2; i++) {
			if(Ffood[i].flag == 0) {
				Ffood[i].timer = 0;
				Ffood[i].move_flag = 1;
				Ffood[i].flag_new = 1;
				Ffood[i].flag = 1;
				while(1) {
								tmp = rand()%food_var[lv_cnt];
								if(!check[tmp]) {
									check[tmp] = 1;
									Ffood[i].image = tmp;
									break;
								}
				}
				Ffood[i].pos[0] = Ffood[i].pos_back[0] = rand() % 8 * 40 ;
				Ffood[i].pos[1] = 0;
				check[i] = 0;
				break;
		}
	}
}
	for(i=0;i<food_var[lv_cnt]/2;i++) {
		if(Ffood[i].flag == 1) {
			Ffood[i].timer = time;
			if(Ffood[i].timer >= Ffood[i].speed_step) {
				Ffood[i].pos_back[0] = Ffood[i].pos[0] ;
				Ffood[i].pos_back[1] = Ffood[i].pos[1] ;
				if(Ffood[i].flag_new) {
					Ffood[i].flag_new = 0;
				}
				else Ffood[i].pos[1] = Ffood[i].pos[1] + Ffood[i].move_step;
				Ffood[i].move_flag = 1;
			}
		}
	}
}

void Draw_Food(void) {
	int i;
	for(i=0; i<food_var[lv_cnt]/2; i++) {
		if(Ffood[i].pos[1] >= 200) {


			if(lv_cnt>=3) {Check2(i);}
			else if(lv_cnt<=2) {Check1(i);}
			Ffood[i].pos[1] = 0;
			Lcd_Printf(55,225, YELLOW,BLACK, 1,1,"%d", score);
			if(score==10) {lv_cnt++; lv_flag=1; return;}
			if(score<=0) {GameOver(); return;}
			Ffood[i].flag=0;
			Lcd_Draw_Bar(Ffood[i].pos_back[0], Ffood[i].pos_back[1], Ffood[i].pos_back[0] + Ffood[i].size[0], Ffood[i].pos_back[1] + Ffood[i].size[1], WHITE);
			if(lv_cnt<=1) {Lcd_Draw_BMP(Bas.pos[0],Bas.pos[1],basket);}
			else if(lv_cnt>=2) {Lcd_Draw_BMP(Bas.pos[0],Bas.pos[1],basket2);}
		}
		if(Ffood[i].move_flag != 0 && Ffood[i].flag != 0) {
			Lcd_Draw_Bar(Ffood[i].pos_back[0], Ffood[i].pos_back[1], Ffood[i].pos_back[0] + Ffood[i].size[0], Ffood[i].pos_back[1] + Ffood[i].size[1], WHITE);
			Lcd_Draw_BMP(Ffood[i].pos[0],Ffood[i].pos[1],Disp[Ffood[i].image]);
			Ffood[i].move_flag = 0;
		}

	}
}

void Check1(int num) {
	int idx = Ffood[num].pos[0] / 40;
	int idx_fd = Ffood[num].image;
	if(idx ==0 || idx==1) {
		if(Bas.pos[0]>=0 && Bas.pos[0] <80) {
			if(!(idx_fd%2)) {score++;  vege_cnt++; return;}
			else if (idx_fd==1 || idx_fd==5){score-=2; return;}
			else if (idx_fd==3) {score--; return;}
			else if (idx_fd==7) GameOver();
		}
		else return;
	}
	else if(idx == 2 || idx ==3) {
		if(Bas.pos[0]>=80 && Bas.pos[0] <160) {
			if(!(idx_fd%2)) {score++; vege_cnt++; return;}
			else if (idx_fd==1 || idx_fd==5){score-=2; return;}
			else if (idx_fd==3) {score--; return;}
			else if (idx_fd==7) GameOver();
				}
		else return;
	}
	else if(idx ==4 || idx == 5) {
		if(Bas.pos[0]>=160 && Bas.pos[0] <240) {
			if(!(idx_fd%2)) {score++; vege_cnt++; return;}
			else if (idx_fd==1 || idx_fd==5){score-=2; return;}
			else if (idx_fd==3) {score--; return;}
			else if (idx_fd==7) GameOver();
		}
		else return;
	}
	else {
		if(Bas.pos[0]>=240) {
			if(!(idx_fd%2)) {score++; vege_cnt++; return;}
			else if (idx_fd==1 || idx_fd==5){score-=2; return;}
			else if (idx_fd==3) {score--; return;}
			else if (idx_fd==7) GameOver();
				}
		else return;
	}

}

void Check2(int num) {
	int idx = Ffood[num].pos[0];
	int idx_fd = Ffood[num].image;
	if(idx ==Bas.pos[0]) {
			if(idx_fd>=7)GameOver();
			else if (idx_fd==1 || idx_fd==5){score-=2; return;}
			else if (idx_fd==3) {score--; return;}
			else if (!(idx_fd%2)){score++; vege_cnt++; return;}
	}
	else return;

}

void Move_Basket(int key) {

	if(key == 2) {
		if(Bas.pos[0] <= 0) {
			return;
		}
		else {
			Bas.pos_back[0] = Bas.pos[0];
			Bas.pos[0] = Bas.pos[0] - Bas.move_step;
		}
	}
	else if(key == 4) {
		if(Bas.pos[0] >= 240+bas_right[lv_cnt]) {
			return;
		}
		else {
			Bas.pos_back[0] = Bas.pos[0];
			Bas.pos[0] = Bas.pos[0] + Bas.move_step;
		}
	}
}

void Draw_Basket1(void) {

	Lcd_Draw_Bar(Bas.pos_back[0], Bas.pos_back[1], Bas.pos_back[0] + Bas.size[0], Bas.pos_back[1] + Bas.size[1], BACK_COLOR);

	if(Bas.pos[0] + Bas.size[0] >= 319) {
		Lcd_Draw_BMP(Bas.pos[0],Bas.pos[1],basket);
	}
	else {
		Lcd_Draw_BMP(Bas.pos[0],Bas.pos[1],basket);
	}

}
void Draw_Basket2(void) {
	Bas.size[0] = 40;
	Bas.move_step = 40;
	Lcd_Draw_Bar(Bas.pos_back[0], Bas.pos_back[1], Bas.pos_back[0] + Bas.size[0], Bas.pos_back[1] + Bas.size[1], BACK_COLOR);

	if(Bas.pos[0] + Bas.size[0] >= 319) {
		Lcd_Draw_BMP(Bas.pos[0],Bas.pos[1],basket2);


	}
	else {
		Lcd_Draw_BMP(Bas.pos[0],Bas.pos[1],basket2);
	}

}

void Game_Init(void)
{


	Lcd_Clr_Screen(BACK_COLOR);
	Lcd_Draw_Bar(0,220,320,240,BLACK);
	Timer0_Repeat(600);
	Lcd_Printf(7,225, WHITE, BLUE, 1,1,"%s", "score");
	Lcd_Printf(55,225, YELLOW,BLACK, 1,1,"%d", score);
	switch(lv_cnt) {
	case 0: Timer0_Repeat(600); Lcd_Printf(270,225, PINK, BLACK, 1,1,"%s", "LEVEL1"); break;
	case 1: Timer0_Repeat(600); Lcd_Printf(270,225, PINK, BLACK, 1,1,"%s", "LEVEL2"); break;
	case 2:	Timer0_Repeat(400); Lcd_Printf(270,225, PINK, BLACK, 1,1,"%s", "LEVEL3"); break;
	case 3: Timer0_Repeat(300); Lcd_Printf(270,225, PINK, BLACK, 1,1,"%s", "LEVEL4"); break;
	}
}


void GameOver(void) {
	int i = 0;
	Lcd_Draw_BMP(0,0,black);
			do {
				Lcd_Printf(90,30,RED,BLACK,2,2,"GAME OVER");
				if(score<0) score=0;
				Lcd_Printf(110,140,BLUE,YELLOW,1,1," SCORE : ");
				Lcd_Printf(175,140,PINK,YELLOW,1,1,"%d ", score);

				Lcd_Printf(65,160,WHITE,BLACK,1,1,"Try Again : ");
				Lcd_Printf(162,160,RED,BLACK,1,1,"Push Button");
				while(song[i][0] != 0xff)
							{
								Timer3_Buzzer_Beep(song[i][0], song[i][1]);
								i++;
							}
				Timer4_Delay(500);
				Lcd_Draw_Bar(90,30,300,60,BLACK);
				Lcd_Draw_Bar(50,190,300,210,BLACK);
				Led_Display(0x5);
				Timer4_Delay(50);
				Led_Display(0x6);
				Timer4_Delay(50);

			}while(!Key_Get_Pressed());

			lv_cnt = 0;
			Level();

}

